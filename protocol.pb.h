// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
void InitDefaultsUserInfoImpl();
void InitDefaultsUserInfo();
void InitDefaultsMusicInfoImpl();
void InitDefaultsMusicInfo();
void InitDefaultsCommentInfoImpl();
void InitDefaultsCommentInfo();
void InitDefaultsMusicListImpl();
void InitDefaultsMusicList();
void InitDefaultsMusicDataImpl();
void InitDefaultsMusicData();
void InitDefaultsCommentListImpl();
void InitDefaultsCommentList();
void InitDefaultsUserListImpl();
void InitDefaultsUserList();
void InitDefaultsDatapackageImpl();
void InitDefaultsDatapackage();
inline void InitDefaults() {
  InitDefaultsHeader();
  InitDefaultsUserInfo();
  InitDefaultsMusicInfo();
  InitDefaultsCommentInfo();
  InitDefaultsMusicList();
  InitDefaultsMusicData();
  InitDefaultsCommentList();
  InitDefaultsUserList();
  InitDefaultsDatapackage();
}
}  // namespace protobuf_protocol_2eproto
class CommentInfo;
class CommentInfoDefaultTypeInternal;
extern CommentInfoDefaultTypeInternal _CommentInfo_default_instance_;
class CommentList;
class CommentListDefaultTypeInternal;
extern CommentListDefaultTypeInternal _CommentList_default_instance_;
class Datapackage;
class DatapackageDefaultTypeInternal;
extern DatapackageDefaultTypeInternal _Datapackage_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class MusicData;
class MusicDataDefaultTypeInternal;
extern MusicDataDefaultTypeInternal _MusicData_default_instance_;
class MusicInfo;
class MusicInfoDefaultTypeInternal;
extern MusicInfoDefaultTypeInternal _MusicInfo_default_instance_;
class MusicList;
class MusicListDefaultTypeInternal;
extern MusicListDefaultTypeInternal _MusicList_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserList;
class UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;

enum Header_Type {
  Header_Type_REQUEST = 0,
  Header_Type_REPONSE = 1,
  Header_Type_Header_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Header_Type_Header_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Header_Type_IsValid(int value);
const Header_Type Header_Type_Type_MIN = Header_Type_REQUEST;
const Header_Type Header_Type_Type_MAX = Header_Type_REPONSE;
const int Header_Type_Type_ARRAYSIZE = Header_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Type_descriptor();
inline const ::std::string& Header_Type_Name(Header_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Type_descriptor(), value);
}
inline bool Header_Type_Parse(
    const ::std::string& name, Header_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Type>(
    Header_Type_descriptor(), name, value);
}
enum Header_Resource {
  Header_Resource_LOGIN = 0,
  Header_Resource_REGISTER = 1,
  Header_Resource_SEARCH_MUSIC = 2,
  Header_Resource_SEARCH_USER = 3,
  Header_Resource_COMMENT = 4,
  Header_Resource_LIKE = 5,
  Header_Resource_GET_COMMENTS = 6,
  Header_Resource_GET_MUSICS = 7,
  Header_Resource_GET_MUSICFILE = 8,
  Header_Resource_GET_USERS = 9,
  Header_Resource_LOGOUT = 10,
  Header_Resource_FOLLOW = 11,
  Header_Resource_Header_Resource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Header_Resource_Header_Resource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Header_Resource_IsValid(int value);
const Header_Resource Header_Resource_Resource_MIN = Header_Resource_LOGIN;
const Header_Resource Header_Resource_Resource_MAX = Header_Resource_FOLLOW;
const int Header_Resource_Resource_ARRAYSIZE = Header_Resource_Resource_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Resource_descriptor();
inline const ::std::string& Header_Resource_Name(Header_Resource value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Resource_descriptor(), value);
}
inline bool Header_Resource_Parse(
    const ::std::string& name, Header_Resource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Resource>(
    Header_Resource_descriptor(), name, value);
}
enum Header_Status {
  Header_Status_OK = 0,
  Header_Status_UNAUTHORIZED = 1,
  Header_Status_NOTFOUND = 2,
  Header_Status_ERROR = 3,
  Header_Status_Header_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Header_Status_Header_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Header_Status_IsValid(int value);
const Header_Status Header_Status_Status_MIN = Header_Status_OK;
const Header_Status Header_Status_Status_MAX = Header_Status_ERROR;
const int Header_Status_Status_ARRAYSIZE = Header_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Status_descriptor();
inline const ::std::string& Header_Status_Name(Header_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Status_descriptor(), value);
}
inline bool Header_Status_Parse(
    const ::std::string& name, Header_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Status>(
    Header_Status_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Header_Type Type;
  static const Type REQUEST =
    Header_Type_REQUEST;
  static const Type REPONSE =
    Header_Type_REPONSE;
  static inline bool Type_IsValid(int value) {
    return Header_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Header_Type_Type_MIN;
  static const Type Type_MAX =
    Header_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Header_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Header_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Header_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Header_Type_Parse(name, value);
  }

  typedef Header_Resource Resource;
  static const Resource LOGIN =
    Header_Resource_LOGIN;
  static const Resource REGISTER =
    Header_Resource_REGISTER;
  static const Resource SEARCH_MUSIC =
    Header_Resource_SEARCH_MUSIC;
  static const Resource SEARCH_USER =
    Header_Resource_SEARCH_USER;
  static const Resource COMMENT =
    Header_Resource_COMMENT;
  static const Resource LIKE =
    Header_Resource_LIKE;
  static const Resource GET_COMMENTS =
    Header_Resource_GET_COMMENTS;
  static const Resource GET_MUSICS =
    Header_Resource_GET_MUSICS;
  static const Resource GET_MUSICFILE =
    Header_Resource_GET_MUSICFILE;
  static const Resource GET_USERS =
    Header_Resource_GET_USERS;
  static const Resource LOGOUT =
    Header_Resource_LOGOUT;
  static const Resource FOLLOW =
    Header_Resource_FOLLOW;
  static inline bool Resource_IsValid(int value) {
    return Header_Resource_IsValid(value);
  }
  static const Resource Resource_MIN =
    Header_Resource_Resource_MIN;
  static const Resource Resource_MAX =
    Header_Resource_Resource_MAX;
  static const int Resource_ARRAYSIZE =
    Header_Resource_Resource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resource_descriptor() {
    return Header_Resource_descriptor();
  }
  static inline const ::std::string& Resource_Name(Resource value) {
    return Header_Resource_Name(value);
  }
  static inline bool Resource_Parse(const ::std::string& name,
      Resource* value) {
    return Header_Resource_Parse(name, value);
  }

  typedef Header_Status Status;
  static const Status OK =
    Header_Status_OK;
  static const Status UNAUTHORIZED =
    Header_Status_UNAUTHORIZED;
  static const Status NOTFOUND =
    Header_Status_NOTFOUND;
  static const Status ERROR =
    Header_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Header_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Header_Status_Status_MIN;
  static const Status Status_MAX =
    Header_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Header_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Header_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Header_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Header_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Header.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Header_Type type() const;
  void set_type(::Header_Type value);

  // .Header.Resource resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  ::Header_Resource resource() const;
  void set_resource(::Header_Resource value);

  // .Header.Status status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::Header_Status status() const;
  void set_status(::Header_Status value);

  // @@protoc_insertion_point(class_scope:Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  int resource_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsHeaderImpl();
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsUserInfoImpl();
};
// -------------------------------------------------------------------

class MusicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MusicInfo) */ {
 public:
  MusicInfo();
  virtual ~MusicInfo();

  MusicInfo(const MusicInfo& from);

  inline MusicInfo& operator=(const MusicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MusicInfo(MusicInfo&& from) noexcept
    : MusicInfo() {
    *this = ::std::move(from);
  }

  inline MusicInfo& operator=(MusicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MusicInfo* internal_default_instance() {
    return reinterpret_cast<const MusicInfo*>(
               &_MusicInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MusicInfo* other);
  friend void swap(MusicInfo& a, MusicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MusicInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MusicInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MusicInfo& from);
  void MergeFrom(const MusicInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MusicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string singer = 2;
  void clear_singer();
  static const int kSingerFieldNumber = 2;
  const ::std::string& singer() const;
  void set_singer(const ::std::string& value);
  #if LANG_CXX11
  void set_singer(::std::string&& value);
  #endif
  void set_singer(const char* value);
  void set_singer(const char* value, size_t size);
  ::std::string* mutable_singer();
  ::std::string* release_singer();
  void set_allocated_singer(::std::string* singer);

  // @@protoc_insertion_point(class_scope:MusicInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr singer_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsMusicInfoImpl();
};
// -------------------------------------------------------------------

class CommentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommentInfo) */ {
 public:
  CommentInfo();
  virtual ~CommentInfo();

  CommentInfo(const CommentInfo& from);

  inline CommentInfo& operator=(const CommentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommentInfo(CommentInfo&& from) noexcept
    : CommentInfo() {
    *this = ::std::move(from);
  }

  inline CommentInfo& operator=(CommentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommentInfo* internal_default_instance() {
    return reinterpret_cast<const CommentInfo*>(
               &_CommentInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CommentInfo* other);
  friend void swap(CommentInfo& a, CommentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommentInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CommentInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommentInfo& from);
  void MergeFrom(const CommentInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string musicname = 6;
  void clear_musicname();
  static const int kMusicnameFieldNumber = 6;
  const ::std::string& musicname() const;
  void set_musicname(const ::std::string& value);
  #if LANG_CXX11
  void set_musicname(::std::string&& value);
  #endif
  void set_musicname(const char* value);
  void set_musicname(const char* value, size_t size);
  ::std::string* mutable_musicname();
  ::std::string* release_musicname();
  void set_allocated_musicname(::std::string* musicname);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 thumb = 5;
  void clear_thumb();
  static const int kThumbFieldNumber = 5;
  ::google::protobuf::int32 thumb() const;
  void set_thumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommentInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr musicname_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 thumb_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsCommentInfoImpl();
};
// -------------------------------------------------------------------

class MusicList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MusicList) */ {
 public:
  MusicList();
  virtual ~MusicList();

  MusicList(const MusicList& from);

  inline MusicList& operator=(const MusicList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MusicList(MusicList&& from) noexcept
    : MusicList() {
    *this = ::std::move(from);
  }

  inline MusicList& operator=(MusicList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MusicList* internal_default_instance() {
    return reinterpret_cast<const MusicList*>(
               &_MusicList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MusicList* other);
  friend void swap(MusicList& a, MusicList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MusicList* New() const PROTOBUF_FINAL { return New(NULL); }

  MusicList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MusicList& from);
  void MergeFrom(const MusicList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MusicList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MusicInfo musicInfo = 2;
  int musicinfo_size() const;
  void clear_musicinfo();
  static const int kMusicInfoFieldNumber = 2;
  const ::MusicInfo& musicinfo(int index) const;
  ::MusicInfo* mutable_musicinfo(int index);
  ::MusicInfo* add_musicinfo();
  ::google::protobuf::RepeatedPtrField< ::MusicInfo >*
      mutable_musicinfo();
  const ::google::protobuf::RepeatedPtrField< ::MusicInfo >&
      musicinfo() const;

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:MusicList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MusicInfo > musicinfo_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsMusicListImpl();
};
// -------------------------------------------------------------------

class MusicData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MusicData) */ {
 public:
  MusicData();
  virtual ~MusicData();

  MusicData(const MusicData& from);

  inline MusicData& operator=(const MusicData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MusicData(MusicData&& from) noexcept
    : MusicData() {
    *this = ::std::move(from);
  }

  inline MusicData& operator=(MusicData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MusicData* internal_default_instance() {
    return reinterpret_cast<const MusicData*>(
               &_MusicData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MusicData* other);
  friend void swap(MusicData& a, MusicData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MusicData* New() const PROTOBUF_FINAL { return New(NULL); }

  MusicData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MusicData& from);
  void MergeFrom(const MusicData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MusicData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:MusicData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsMusicDataImpl();
};
// -------------------------------------------------------------------

class CommentList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommentList) */ {
 public:
  CommentList();
  virtual ~CommentList();

  CommentList(const CommentList& from);

  inline CommentList& operator=(const CommentList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommentList(CommentList&& from) noexcept
    : CommentList() {
    *this = ::std::move(from);
  }

  inline CommentList& operator=(CommentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommentList* internal_default_instance() {
    return reinterpret_cast<const CommentList*>(
               &_CommentList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CommentList* other);
  friend void swap(CommentList& a, CommentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommentList* New() const PROTOBUF_FINAL { return New(NULL); }

  CommentList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommentList& from);
  void MergeFrom(const CommentList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommentList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommentInfo commentInfo = 1;
  int commentinfo_size() const;
  void clear_commentinfo();
  static const int kCommentInfoFieldNumber = 1;
  const ::CommentInfo& commentinfo(int index) const;
  ::CommentInfo* mutable_commentinfo(int index);
  ::CommentInfo* add_commentinfo();
  ::google::protobuf::RepeatedPtrField< ::CommentInfo >*
      mutable_commentinfo();
  const ::google::protobuf::RepeatedPtrField< ::CommentInfo >&
      commentinfo() const;

  // @@protoc_insertion_point(class_scope:CommentList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CommentInfo > commentinfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsCommentListImpl();
};
// -------------------------------------------------------------------

class UserList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserList) */ {
 public:
  UserList();
  virtual ~UserList();

  UserList(const UserList& from);

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(UserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UserList* other);
  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserList* New() const PROTOBUF_FINAL { return New(NULL); }

  UserList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserList& from);
  void MergeFrom(const UserList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserInfo userInfo = 1;
  int userinfo_size() const;
  void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  const ::UserInfo& userinfo(int index) const;
  ::UserInfo* mutable_userinfo(int index);
  ::UserInfo* add_userinfo();
  ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_userinfo();
  const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      userinfo() const;

  // @@protoc_insertion_point(class_scope:UserList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > userinfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsUserListImpl();
};
// -------------------------------------------------------------------

class Datapackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Datapackage) */ {
 public:
  Datapackage();
  virtual ~Datapackage();

  Datapackage(const Datapackage& from);

  inline Datapackage& operator=(const Datapackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Datapackage(Datapackage&& from) noexcept
    : Datapackage() {
    *this = ::std::move(from);
  }

  inline Datapackage& operator=(Datapackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Datapackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datapackage* internal_default_instance() {
    return reinterpret_cast<const Datapackage*>(
               &_Datapackage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Datapackage* other);
  friend void swap(Datapackage& a, Datapackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Datapackage* New() const PROTOBUF_FINAL { return New(NULL); }

  Datapackage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Datapackage& from);
  void MergeFrom(const Datapackage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Datapackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Header& header() const;
  ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);

  // .google.protobuf.Any body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::google::protobuf::Any& body() const;
  ::google::protobuf::Any* release_body();
  ::google::protobuf::Any* mutable_body();
  void set_allocated_body(::google::protobuf::Any* body);

  // @@protoc_insertion_point(class_scope:Datapackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Header* header_;
  ::google::protobuf::Any* body_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsDatapackageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// .Header.Type type = 1;
inline void Header::clear_type() {
  type_ = 0;
}
inline ::Header_Type Header::type() const {
  // @@protoc_insertion_point(field_get:Header.type)
  return static_cast< ::Header_Type >(type_);
}
inline void Header::set_type(::Header_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Header.type)
}

// .Header.Resource resource = 2;
inline void Header::clear_resource() {
  resource_ = 0;
}
inline ::Header_Resource Header::resource() const {
  // @@protoc_insertion_point(field_get:Header.resource)
  return static_cast< ::Header_Resource >(resource_);
}
inline void Header::set_resource(::Header_Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:Header.resource)
}

// .Header.Status status = 3;
inline void Header::clear_status() {
  status_ = 0;
}
inline ::Header_Status Header::status() const {
  // @@protoc_insertion_point(field_get:Header.status)
  return static_cast< ::Header_Status >(status_);
}
inline void Header::set_status(::Header_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Header.status)
}

// -------------------------------------------------------------------

// UserInfo

// string username = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:UserInfo.username)
  return username_.GetNoArena();
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.username)
}
#if LANG_CXX11
inline void UserInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.username)
}
#endif
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:UserInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.username)
}

// string password = 2;
inline void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:UserInfo.password)
  return password_.GetNoArena();
}
inline void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.password)
}
#if LANG_CXX11
inline void UserInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.password)
}
#endif
inline void UserInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.password)
}
inline void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.password)
}
inline ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_password() {
  // @@protoc_insertion_point(field_release:UserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.password)
}

// -------------------------------------------------------------------

// MusicInfo

// string name = 1;
inline void MusicInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MusicInfo::name() const {
  // @@protoc_insertion_point(field_get:MusicInfo.name)
  return name_.GetNoArena();
}
inline void MusicInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicInfo.name)
}
#if LANG_CXX11
inline void MusicInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicInfo.name)
}
#endif
inline void MusicInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicInfo.name)
}
inline void MusicInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicInfo.name)
}
inline ::std::string* MusicInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MusicInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MusicInfo::release_name() {
  // @@protoc_insertion_point(field_release:MusicInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MusicInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MusicInfo.name)
}

// string singer = 2;
inline void MusicInfo::clear_singer() {
  singer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MusicInfo::singer() const {
  // @@protoc_insertion_point(field_get:MusicInfo.singer)
  return singer_.GetNoArena();
}
inline void MusicInfo::set_singer(const ::std::string& value) {
  
  singer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicInfo.singer)
}
#if LANG_CXX11
inline void MusicInfo::set_singer(::std::string&& value) {
  
  singer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicInfo.singer)
}
#endif
inline void MusicInfo::set_singer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  singer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicInfo.singer)
}
inline void MusicInfo::set_singer(const char* value, size_t size) {
  
  singer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicInfo.singer)
}
inline ::std::string* MusicInfo::mutable_singer() {
  
  // @@protoc_insertion_point(field_mutable:MusicInfo.singer)
  return singer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MusicInfo::release_singer() {
  // @@protoc_insertion_point(field_release:MusicInfo.singer)
  
  return singer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MusicInfo::set_allocated_singer(::std::string* singer) {
  if (singer != NULL) {
    
  } else {
    
  }
  singer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), singer);
  // @@protoc_insertion_point(field_set_allocated:MusicInfo.singer)
}

// -------------------------------------------------------------------

// CommentInfo

// int32 id = 1;
inline void CommentInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CommentInfo::id() const {
  // @@protoc_insertion_point(field_get:CommentInfo.id)
  return id_;
}
inline void CommentInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:CommentInfo.id)
}

// string content = 2;
inline void CommentInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommentInfo::content() const {
  // @@protoc_insertion_point(field_get:CommentInfo.content)
  return content_.GetNoArena();
}
inline void CommentInfo::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentInfo.content)
}
#if LANG_CXX11
inline void CommentInfo::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommentInfo.content)
}
#endif
inline void CommentInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentInfo.content)
}
inline void CommentInfo::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentInfo.content)
}
inline ::std::string* CommentInfo::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:CommentInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentInfo::release_content() {
  // @@protoc_insertion_point(field_release:CommentInfo.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:CommentInfo.content)
}

// string username = 3;
inline void CommentInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommentInfo::username() const {
  // @@protoc_insertion_point(field_get:CommentInfo.username)
  return username_.GetNoArena();
}
inline void CommentInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentInfo.username)
}
#if LANG_CXX11
inline void CommentInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommentInfo.username)
}
#endif
inline void CommentInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentInfo.username)
}
inline void CommentInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentInfo.username)
}
inline ::std::string* CommentInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:CommentInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentInfo::release_username() {
  // @@protoc_insertion_point(field_release:CommentInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CommentInfo.username)
}

// string date = 4;
inline void CommentInfo::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommentInfo::date() const {
  // @@protoc_insertion_point(field_get:CommentInfo.date)
  return date_.GetNoArena();
}
inline void CommentInfo::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentInfo.date)
}
#if LANG_CXX11
inline void CommentInfo::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommentInfo.date)
}
#endif
inline void CommentInfo::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentInfo.date)
}
inline void CommentInfo::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentInfo.date)
}
inline ::std::string* CommentInfo::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:CommentInfo.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentInfo::release_date() {
  // @@protoc_insertion_point(field_release:CommentInfo.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentInfo::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:CommentInfo.date)
}

// int32 thumb = 5;
inline void CommentInfo::clear_thumb() {
  thumb_ = 0;
}
inline ::google::protobuf::int32 CommentInfo::thumb() const {
  // @@protoc_insertion_point(field_get:CommentInfo.thumb)
  return thumb_;
}
inline void CommentInfo::set_thumb(::google::protobuf::int32 value) {
  
  thumb_ = value;
  // @@protoc_insertion_point(field_set:CommentInfo.thumb)
}

// string musicname = 6;
inline void CommentInfo::clear_musicname() {
  musicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommentInfo::musicname() const {
  // @@protoc_insertion_point(field_get:CommentInfo.musicname)
  return musicname_.GetNoArena();
}
inline void CommentInfo::set_musicname(const ::std::string& value) {
  
  musicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentInfo.musicname)
}
#if LANG_CXX11
inline void CommentInfo::set_musicname(::std::string&& value) {
  
  musicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommentInfo.musicname)
}
#endif
inline void CommentInfo::set_musicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  musicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentInfo.musicname)
}
inline void CommentInfo::set_musicname(const char* value, size_t size) {
  
  musicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentInfo.musicname)
}
inline ::std::string* CommentInfo::mutable_musicname() {
  
  // @@protoc_insertion_point(field_mutable:CommentInfo.musicname)
  return musicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentInfo::release_musicname() {
  // @@protoc_insertion_point(field_release:CommentInfo.musicname)
  
  return musicname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentInfo::set_allocated_musicname(::std::string* musicname) {
  if (musicname != NULL) {
    
  } else {
    
  }
  musicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), musicname);
  // @@protoc_insertion_point(field_set_allocated:CommentInfo.musicname)
}

// -------------------------------------------------------------------

// MusicList

// string username = 1;
inline void MusicList::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MusicList::username() const {
  // @@protoc_insertion_point(field_get:MusicList.username)
  return username_.GetNoArena();
}
inline void MusicList::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicList.username)
}
#if LANG_CXX11
inline void MusicList::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicList.username)
}
#endif
inline void MusicList::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicList.username)
}
inline void MusicList::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicList.username)
}
inline ::std::string* MusicList::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:MusicList.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MusicList::release_username() {
  // @@protoc_insertion_point(field_release:MusicList.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MusicList::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MusicList.username)
}

// repeated .MusicInfo musicInfo = 2;
inline int MusicList::musicinfo_size() const {
  return musicinfo_.size();
}
inline void MusicList::clear_musicinfo() {
  musicinfo_.Clear();
}
inline const ::MusicInfo& MusicList::musicinfo(int index) const {
  // @@protoc_insertion_point(field_get:MusicList.musicInfo)
  return musicinfo_.Get(index);
}
inline ::MusicInfo* MusicList::mutable_musicinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MusicList.musicInfo)
  return musicinfo_.Mutable(index);
}
inline ::MusicInfo* MusicList::add_musicinfo() {
  // @@protoc_insertion_point(field_add:MusicList.musicInfo)
  return musicinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MusicInfo >*
MusicList::mutable_musicinfo() {
  // @@protoc_insertion_point(field_mutable_list:MusicList.musicInfo)
  return &musicinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MusicInfo >&
MusicList::musicinfo() const {
  // @@protoc_insertion_point(field_list:MusicList.musicInfo)
  return musicinfo_;
}

// -------------------------------------------------------------------

// MusicData

// bytes data = 1;
inline void MusicData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MusicData::data() const {
  // @@protoc_insertion_point(field_get:MusicData.data)
  return data_.GetNoArena();
}
inline void MusicData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicData.data)
}
#if LANG_CXX11
inline void MusicData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicData.data)
}
#endif
inline void MusicData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicData.data)
}
inline void MusicData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicData.data)
}
inline ::std::string* MusicData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:MusicData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MusicData::release_data() {
  // @@protoc_insertion_point(field_release:MusicData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MusicData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:MusicData.data)
}

// -------------------------------------------------------------------

// CommentList

// repeated .CommentInfo commentInfo = 1;
inline int CommentList::commentinfo_size() const {
  return commentinfo_.size();
}
inline void CommentList::clear_commentinfo() {
  commentinfo_.Clear();
}
inline const ::CommentInfo& CommentList::commentinfo(int index) const {
  // @@protoc_insertion_point(field_get:CommentList.commentInfo)
  return commentinfo_.Get(index);
}
inline ::CommentInfo* CommentList::mutable_commentinfo(int index) {
  // @@protoc_insertion_point(field_mutable:CommentList.commentInfo)
  return commentinfo_.Mutable(index);
}
inline ::CommentInfo* CommentList::add_commentinfo() {
  // @@protoc_insertion_point(field_add:CommentList.commentInfo)
  return commentinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CommentInfo >*
CommentList::mutable_commentinfo() {
  // @@protoc_insertion_point(field_mutable_list:CommentList.commentInfo)
  return &commentinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CommentInfo >&
CommentList::commentinfo() const {
  // @@protoc_insertion_point(field_list:CommentList.commentInfo)
  return commentinfo_;
}

// -------------------------------------------------------------------

// UserList

// repeated .UserInfo userInfo = 1;
inline int UserList::userinfo_size() const {
  return userinfo_.size();
}
inline void UserList::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::UserInfo& UserList::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:UserList.userInfo)
  return userinfo_.Get(index);
}
inline ::UserInfo* UserList::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:UserList.userInfo)
  return userinfo_.Mutable(index);
}
inline ::UserInfo* UserList::add_userinfo() {
  // @@protoc_insertion_point(field_add:UserList.userInfo)
  return userinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
UserList::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:UserList.userInfo)
  return &userinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
UserList::userinfo() const {
  // @@protoc_insertion_point(field_list:UserList.userInfo)
  return userinfo_;
}

// -------------------------------------------------------------------

// Datapackage

// .Header header = 1;
inline bool Datapackage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Datapackage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Header& Datapackage::header() const {
  const ::Header* p = header_;
  // @@protoc_insertion_point(field_get:Datapackage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Header*>(
      &::_Header_default_instance_);
}
inline ::Header* Datapackage::release_header() {
  // @@protoc_insertion_point(field_release:Datapackage.header)
  
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Header* Datapackage::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Header;
  }
  // @@protoc_insertion_point(field_mutable:Datapackage.header)
  return header_;
}
inline void Datapackage::set_allocated_header(::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Datapackage.header)
}

// .google.protobuf.Any body = 2;
inline bool Datapackage::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::google::protobuf::Any& Datapackage::body() const {
  const ::google::protobuf::Any* p = body_;
  // @@protoc_insertion_point(field_get:Datapackage.body)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Datapackage::release_body() {
  // @@protoc_insertion_point(field_release:Datapackage.body)
  
  ::google::protobuf::Any* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Datapackage::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Datapackage.body)
  return body_;
}
inline void Datapackage::set_allocated_body(::google::protobuf::Any* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:Datapackage.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Header_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Type>() {
  return ::Header_Type_descriptor();
}
template <> struct is_proto_enum< ::Header_Resource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Resource>() {
  return ::Header_Resource_descriptor();
}
template <> struct is_proto_enum< ::Header_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Status>() {
  return ::Header_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
